<?xml version="1.0"?>
<!DOCTYPE config [
<!ENTITY listserverConfig SYSTEM "../conf/james-listmanager.xml">
<!ENTITY listserverStores SYSTEM "../conf/james-liststores.xml">
<!ENTITY fetchmailConfig SYSTEM "../conf/james-fetchmail.xml">
<!ENTITY smtphandlerchainConfig SYSTEM "../conf/james-smtphandlerchain.xml">
]>

<!--  Configuration file for the ASF James server -->

<!--  This file contains important settings that control the behaviour -->
<!--  of all of the services and repositories. -->

<!--                               README!                            -->

<!-- This configuration file is designed to run without alteration for simple tests. -->
<!-- It assumes you have a DNS server on localhost and assigns a root password of root. -->

<!-- In case the defaults do not suit you, the items you are most likely to need to change -->
<!-- are preceded by a CHECKME! or CONFIRM? comment in the left margin. -->

<!-- For production use you will probably need to make more extensive changes, see -->
<!-- http://james.apache.org/server/2.3.0/ -->


<config>
   <James>

<!-- CHECKME! -->
      <!-- This is the postmaster email address for this mail server. -->
      <!-- Set this to the appropriate email address for error reports -->
      <!-- If this is set to a non-local email address, the mail server -->
      <!-- will still function, but will generate a warning on startup. -->
      <postmaster>postmaster@meetup.com</postmaster>

      <!-- servernames identifies the DNS namespace served by this instance of James. -->
      <!-- These servernames are used for both matcher/mailet processing and SMTP auth -->
      <!-- to determine when a mail is intended for local delivery. -->
      <!-- -->
      <!-- If autodetect is TRUE, James wil attempt to discover its own host name AND -->
      <!-- use any explicitly specified servernames. -->
      <!-- If autodetect is FALSE, James will use only the specified servernames. -->
      <!-- -->
      <!-- If autodetectIP is not FALSE, James will also allow add the IP address for each servername. -->
      <!-- The automatic IP detection is to support RFC 2821, Sec 4.1.3, address literals. -->
      <!-- -->
      <!-- To override autodetected server names simply add explicit servername elements. -->
      <!-- In most cases this will be necessary. -->
      <!-- By default, the servername 'localhost' is specified. This can be removed, if required. -->
      <!-- -->
      <!-- Warning: If you are using fetchmail it is important to include the -->
      <!-- fetched domains in the server name list to prevent looping.       -->
      <servernames autodetect="true" autodetectIP="true">
<!-- CONFIRM? -->
         <servername>localhost</servername>
      </servernames>

      <!-- Set whether user names are case sensitive or case insensitive -->
      <!-- Set whether to enable local aliases -->
      <!-- Set whether to enable forwarding -->
      <usernames ignoreCase="true" enableAliases="true" enableForwarding="true"/>

      <!-- The inbox repository is the location for users inboxes -->
      <!-- Default setting: file based repository - enter path ( use  "file:///" for absolute) -->
      <inboxRepository>
         <repository destinationURL="file://var/mail/inboxes/" type="MAIL"/>
      </inboxRepository>
   </James>

   <!-- This is an example configuration for FetchMail, a JavaMail based gateway  -->
   <!-- service that pulls messages from other sources, and inserts them into the -->
   <!-- spool.  They are then processed normally, although FetchMail generally    -->
   <!-- has to fabricate some of the envelope information.  FetchMail should be   -->
   <!-- considered a mail gateway, rather than a relay, in RFC terms.             -->
   <!-- Fetchmail is a functionally richer replacement for FetchPOP.              -->
   <!-- CHECKME: FetchMail is disabled by default, and must be configured to use. -->
   <!-- Edit the file referred to by fetchmailConfig to enable and configure.     -->
   <!--&fetchmailConfig;-->

   <!-- Set the Java packages from which to load mailets and matchers -->
   <mailetpackages>
      <mailetpackage>org.apache.james.transport.mailets</mailetpackage>
      <mailetpackage>org.apache.james.transport.mailets.smime</mailetpackage>
      <mailetpackage>org.apache.mailet</mailetpackage>
      <mailetpackage>com.meetup.mailinglist</mailetpackage>
      <mailetpackage>com.meetup.replymessageemail</mailetpackage>
   </mailetpackages>
   <matcherpackages>
      <matcherpackage>org.apache.james.transport.matchers</matcherpackage>
      <matcherpackage>org.apache.james.transport.matchers.smime</matcherpackage>
      <mailetpackage>org.apache.mailet</mailetpackage>
      <matcherpackage>com.meetup.mailinglist</matcherpackage>
      <matcherpackage>com.meetup.replymessageemail</matcherpackage>
   </matcherpackages>

   <!-- The James Spool Manager block  -->
   <!-- -->
   <!-- This block is responsible for processing messages on the spool. -->
   <spoolmanager>
      <!-- Number of spool threads -->
      <threads> 15 </threads>

      <!-- The root processor is a required processor - James routes all mail on the spool -->
      <!-- through this processor first. -->
      <!-- -->
      <!-- This configuration is a sample configuration for the root processor. -->
      <processor name="root">

         <!-- This mailet redirects mail for the user 'postmaster' at any local domain to -->
         <!-- the postmaster address specified for the server. The postmaster address -->
         <!-- is required by rfc822. Do not remove this mailet unless you are meeting -->
         <!-- this requirement through other means (e.g. a XML/JDBCVirtualUserTable mailet) -->
         <mailet match="All" class="PostmasterAlias"/>

         <!-- Important check to avoid looping -->
         <mailet match="RelayLimit=30" class="Null"/>

         <!-- Send remaining mails to the transport processor for either local or remote delivery -->
         <mailet match="All" class="ToProcessor">
            <processor> transport </processor>
         </mailet>
      </processor>

      <!-- The error processor is required.  James may internally set emails to the -->
      <!-- error state.  The error processor is generally invoked when there is an -->
      <!-- unexpected error either in the mailet chain or internal to James. -->
      <!-- -->
      <!-- By default configuration all email that generates an error in placed in -->
      <!-- an error repository. -->
      <processor name="error">
         <mailet match="All" class="ToRepository">
            <repositoryPath> file://var/mail/error </repositoryPath>
		 </mailet>
      </processor>

      <!-- Processor CONFIGURATION SAMPLE: transport is a sample custom processor for local or -->
      <!-- remote delivery -->
      <processor name="transport">
		  <mailet match="MeetupMatcher" class="MeetupMailet" />
		  <mailet match="ReplyMessagesMatcher" class="ReplyMessagesMailet" />
      </processor>

	  <processor name="outbound">

         <!-- Attempt remote delivery using the specified repository for the spool, -->
         <!-- using delay time to retry delivery and the maximum number of retries -->
         <mailet match="All" class="RemoteDelivery">
			 <!--<outgoing> file://var/mail/outgoing/ </outgoing>-->
            <outgoing> file://var/mail/outgoing </outgoing>

            <!-- Delivery Schedule based upon RFC 2821, 4.5.4.1 -->
            <!-- 5 day retry period, with 4 attempts in the first
                 hour, two more within the first 6 hours, and then
                 every 6 hours for the rest of the period. -->
            <delayTime>  5 minutes </delayTime>
            <delayTime> 10 minutes </delayTime>
            <delayTime> 45 minutes </delayTime>
            <delayTime>  2 hours </delayTime>
            <delayTime>  3 hours </delayTime>
            <delayTime>  6 hours </delayTime>
            <maxRetries> 25 </maxRetries>

            <!-- The number of threads that should be trying to deliver outgoing messages -->
            <deliveryThreads>20</deliveryThreads>

            <!-- If false the message will not be sent to given server if any recipients fail -->
            <sendpartial>false</sendpartial>
            
            <!-- By default we send bounces to the "bounce" processor -->
            <!-- By removing this configuration James will fallback to hardcoded bounce -->
            <!-- notifications -->
            <bounceProcessor>bounces</bounceProcessor>

            <!-- A single mail server to deliver all outgoing messages. -->
            <!-- This is useful if this server is a backup or failover machine, -->
            <!-- or if you want all messages to be routed through a particular mail server, -->
            <!-- regardless of the email addresses specified in the message -->
            <!-- -->
            <!-- The gateway element specifies the gateway SMTP server name. -->
            <!-- If your gateway mail server is listening on a port other than 25, -->
            <!-- you can set James to connect to it on that port using the gatewayPort -->
            <!-- element. -->
            <!-- Although normally multiple addresses are implemented through proper -->
            <!-- DNS configuration, the RemoteDelivery mail does allow specifying -->
            <!-- multiple gateway elements, each of which may also have a port -->
            <!-- e.g., mygateway:2525 -->
            <!-- the gatewayPort element is used as a default -->
            <gateway>mail.int.meetup.com</gateway>
            <gatewayPort>25</gatewayPort>
         </mailet>
      </processor>

      <!-- Processor CONFIGURATION SAMPLE: spam is a sample custom processor for handling -->
      <!-- spam. -->
      <!-- You can either log these, bounce these, or just ignore them. -->
      <processor name="spam">
         <mailet match="All" class="Null"/>
      </processor>

      <!-- messages containing viruses. -->
      <processor name="virus">
         <mailet match="All" class="Null" />
      </processor>

      <!-- This processor handles messages that are for local domains, where the user is unknown -->
      <processor name="local-address-error">
         <!-- To notify the sender the address was invalid, uncomment this matcher/mailet configuration -->
         <!-- The original message is not attached to keep the bounce processor from deliverying spam -->
         <mailet match="All" class="Bounce">
            <attachment>none</attachment>
         </mailet>
      </processor>

      <!-- This processor handles messages that are for foreign domains, where relaying is denied -->
      <!-- As of James v2.2, this processor can be deprecated by using the <authorizedAddresses> tag
           in the SMTP Server, and rejecting the message in the protocol transaction.  -->
      <processor name="relay-denied">
         <!-- To notify the sender the address was invalid, uncomment this matcher/mailet configuration -->
         <!-- The original message is not attached to keep the bounce processor from deliverying spam -->
         <mailet match="All" class="Bounce">
            <attachment>none</attachment>
         </mailet>
      </processor>

      <!-- This processor handle the bounces from RemoteDelivery: As of James v2.3, this is the new -->
      <!-- Default. -->
      <!-- -->
      <!-- DSNBounce properly create a DSN compliant bounce -->
      <processor name="bounces">
         <mailet match="All" class="DSNBounce">
            <passThrough>false</passThrough>
          </mailet>
      </processor>
   </spoolmanager>

   <!-- DNS Server Block -->
   <!-- -->
   <!-- Specifies DNS Server information for use by various components inside -->
   <!-- James. -->
   <!-- -->
   <!-- If autodiscover is true, James will attempt to autodiscover the DNS servers configured on your underlying system.-->
   <!-- Currently, this works if the OS has a unix-like /etc/resolv.conf,-->
   <!-- or the system is Windows based with ipconfig or winipcfg.-->
   <!-- -->
   <!-- If no DNS servers are found and you have not specified any below, 127.0.0.1 will be used-->
   <!-- If you use autodiscover and add DNS servers manually a combination of all the dns servers will be used  -->
   <!--  -->
   <!-- Information includes a list of DNS Servers to be used by James.  These are -->
   <!-- specified by the server elements, each of which is a child element of the -->
   <!-- servers element.  Each server element is the IP address of a single DNS server. -->
   <!-- The servers element can have multiple server children. -->
   <dnsserver>
      <servers>
          <server> </server>
      </servers>
      <!-- Change autodiscover to false if you would like to turn off autodiscovery -->
      <!-- and set the DNS servers manually in the <servers> section -->
      <autodiscover>true</autodiscover>
      <authoritative>false</authoritative>

      <!-- Maximum number of entries to maintain in the DNS cache -->
      <maxcachesize>50000</maxcachesize>
   </dnsserver>

   <!-- The RemoteManager server is enabled by default -->
   <!-- Disabling blocks will stop them from listening, -->
   <!-- but does not free as many resources as removing them would -->
   <remotemanager enabled="true">
      <port>4555</port>
      <!--  Uncomment this if you want to bind to a specific inetaddress -->
      <!--
      <bind> </bind>
      -->
      <!--  Uncomment this if you want to use TLS (SSL) on this port -->
      <!--
      <useTLS>true</useTLS>
      -->
      <handler>
         <!-- This is the name used by the server to identify itself in the RemoteManager -->
         <!-- protocol.  If autodetect is TRUE, the server will discover its -->
         <!-- own host name and use that in the protocol.  If discovery fails, -->
         <!-- the value of 'localhost' is used.  If autodetect is FALSE, James -->
         <!-- will use the specified value. -->
         <helloName autodetect="true">james</helloName>
         <administrator_accounts>
<!-- CHECKME! -->
            <!-- Change the default login/password. -->
            <account login="root" password="j4m3s"/>
         </administrator_accounts>
         <connectiontimeout> 60000 </connectiontimeout>
         <!-- The prompt directive adds a prompt to every output from RemoteManager -->
         <prompt>james&gt;</prompt>
      </handler>
   </remotemanager>

    <!-- The SMTP server is enabled by default -->
    <!-- Disabling blocks will stop them from listening, -->
    <!-- but does not free as many resources as removing them would -->
   <smtpserver enabled="true">
      <!-- port 25 is the well-known/IANA registered port for SMTP -->
      <port>6666</port>

      <!-- Uncomment this if you want to bind to a specific inetaddress -->
      <!-- Please NOTE: you should add this IP also to your RemoteAddrNotInNetwork -->
      <!-- in order to avoid relay check for locallly generated bounces -->
      <!-- <bind> 127.0.0.1 </bind> -->

      <handler>
         <!-- This is the name used by the server to identify itself in the SMTP -->
         <!-- protocol.  If autodetect is TRUE, the server will discover its -->
         <!-- own host name and use that in the protocol.  If discovery fails, -->
         <!-- the value of 'localhost' is used.  If autodetect is FALSE, James -->
         <!-- will use the specified value. -->
         <helloName autodetect="false">mail.meetup.com</helloName>
         <connectiontimeout>360000</connectiontimeout>


         <!--  Uncomment this if you want to authorize specific addresses/networks.
               If you use SMTP AUTH, addresses that match those specified here will
               be permitted to relay without SMTP AUTH.  If you do not use SMTP
               AUTH, and you specify addreses here, then only addresses that match
               those specified will be permitted to relay.

               Addresses may be specified as a an IP address or domain name, with an
               optional netmask, e.g.,

               127.*, 127.0.0.0/8, 127.0.0.0/255.0.0.0, and localhost/8 are all the same

               See also the RemoteAddrNotInNetwork matcher in the transport processor.
               You would generally use one OR the other approach.
         -->
         <authorizedAddresses>10.0.0.0/8, 172.0.0.0/8, 127.0.0.0/8, 10.34.0.0/16</authorizedAddresses>

         <!--  This sets the maximum allowed message size (in kilobytes) for this -->
         <!--  SMTP service. If unspecified, the value defaults to 0, which means no limit. -->
         <maxmessagesize>0</maxmessagesize>
         
         <!--  This sets wether to enforce the use of HELO/EHLO salutation before a -->
         <!--  MAIL command is accepted. If unspecified, the value defaults to true -->
         <heloEhloEnforcement>true</heloEhloEnforcement>
      </handler>
   </smtpserver>

   <!-- Spool repository configuration -->
   <!-- The spool repository is the location where incoming mails are temporarily stored -->
   <!-- before being processed. -->
   <spoolrepository destinationURL="file://var/mail/spool/" type="SPOOL"/>
 
   <!-- The Mailstore block -->
   <mailstore>
      <repositories>

         <!-- File based repositories.  These repositories store all message data -->
         <!-- in the file system. -->
         <repository class="org.apache.james.mailrepository.AvalonMailRepository">
            <protocols>
               <protocol>file</protocol>
            </protocols>
            <types>
               <type>MAIL</type>
            </types>
         </repository>
         <repository class="org.apache.james.mailrepository.AvalonSpoolRepository">
            <protocols>
               <protocol>file</protocol>
            </protocols>
            <types>
               <type>SPOOL</type>
            </types>
         </repository>

         <!-- JDBC based repositories.  These repositories store all message data -->
         <!-- in the database. -->
         <repository class="org.apache.james.mailrepository.JDBCMailRepository">
            <protocols>
               <protocol>db</protocol>
            </protocols>
            <types>
               <type>MAIL</type>
            </types>
            <config>
               <sqlFile>file://conf/sqlResources.xml</sqlFile>
               <!-- Set the size threshold for in memory handling of storing operations -->
               <!-- Default is currently 409600000 due to a bug with mysql and binary stream -->
               <!-- currently under investigation. Please change this only if you know what -->
               <!-- you do, this is EXPERIMENTAL -->
               <!--
               <inMemorySizeLimit>4096</inMemorySizeLimit>
                -->
            </config>
         </repository>

         <repository class="org.apache.james.mailrepository.JDBCSpoolRepository">
            <protocols>
               <protocol>db</protocol>
            </protocols>
            <types>
               <type>SPOOL</type>
            </types>
            <config>
               <sqlFile>file://conf/sqlResources.xml</sqlFile>
               <maxcache>1000</maxcache>
               <!-- Set the size threshold for in memory handling of storing operations -->
               <!-- Default is currently 409600000 due to a bug with mysql and binary stream -->
               <!-- currently under investigation. Please change this only if you know what -->
               <!-- you do, this is EXPERIMENTAL -->
               <!--
               <inMemorySizeLimit>4096</inMemorySizeLimit>
                -->
            </config>
         </repository>

         <!-- These repositories store message delivery and headers in the DB, and the body to the filesystem -->
         <repository class="org.apache.james.mailrepository.JDBCMailRepository">
            <protocols>
               <protocol>dbfile</protocol>
            </protocols>
            <types>
               <type>MAIL</type>
            </types>
            <config>
               <sqlFile>file://conf/sqlResources.xml</sqlFile>
               <filestore>file://var/dbmail</filestore>
            </config>
         </repository>

         <repository class="org.apache.james.mailrepository.JDBCSpoolRepository">
            <protocols>
               <protocol>dbfile</protocol>
            </protocols>
            <types>
               <type>SPOOL</type>
            </types>
            <config>
               <sqlFile>file://conf/sqlResources.xml</sqlFile>
               <filestore>file://var/dbmail</filestore>
               <maxcache>1000</maxcache>
            </config>
         </repository>

         <!-- The mbox repository is designed for MAIL only; SPOOL performance would be less than ideal-->
         <repository class="org.apache.james.mailrepository.MBoxMailRepository">
            <protocols>
               <protocol>mbox</protocol>
            </protocols>
            <types>
               <type>MAIL</type>
            </types>
         </repository>

         <repository class="org.apache.james.mailrepository.filepair.File_Persistent_Object_Repository">
            <protocols>
               <protocol>file</protocol>
            </protocols>
            <types>
               <type>OBJECT</type>
            </types>
            <models>
               <model>SYNCHRONOUS</model>
               <model>ASYNCHRONOUS</model>
               <model>CACHE</model>
            </models>
         </repository>

         <repository class="org.apache.james.mailrepository.filepair.File_Persistent_Stream_Repository">
            <protocols>
               <protocol>file</protocol>
            </protocols>
            <types>
               <type>STREAM</type>
            </types>
            <models>
               <model>SYNCHRONOUS</model>
               <model>ASYNCHRONOUS</model>
               <model>CACHE</model>
            </models>
         </repository>
      </repositories>
   </mailstore>

   <users-store>
	   <repository name="LocalUsers" class="org.apache.james.userrepository.UsersFileRepository">
		   <destination URL="file://var/users/"/>
	   </repository>
   </users-store>

   <!--<database-connections>
   	<data-source name="maildb" class="org.apache.james.util.dbcp.JdbcDataSource">
		<driver>com.mysql.jdbc.Driver</driver>
		<dburl>jdbc:mysql://127.0.0.1/james?autoReconnect=true</dburl>
		<user>james</user>
		<password>j4m3s</password>
		<max>50</max>
	</data-source>
   </database-connections> -->

   <pop3server enabled="false"></pop3server>
   <nntpserver enabled="false"></nntpserver>
   <nntp-repository>
   	<!-- If this is set to true, posting will be disallowed. -->
   	<readOnly>false</readOnly>
   
   	<rootPath>file://var/nntp/groups</rootPath>
   	<tempPath>file://var/nntp/temp</tempPath>
   	<articleIDPath>file://var/nntp/articleid</articleIDPath>
   	<articleIDDomainSuffix>news.james.apache.org</articleIDDomainSuffix>
   
   	<spool>
   		<configuration>
   			<spoolPath>file://var/nntp/spool</spoolPath>
   			<!-- The number of threads that process spooler related tasks. -->
   			<threadCount>0</threadCount>
   			<!-- The spool thread(s) should idle for some time, if it has nothing to do  -->
   			<threadIdleTime>60000</threadIdleTime>
   		</configuration>
   	</spool>
   </nntp-repository>

   <!-- Configuration for Cornerstone Services -->
   <!-- -->
   <!-- For a simple configuration, nothing beneath this line should require -->
   <!-- alteration. -->
   <!-- -->
   <!-- You will need to adjust the Socket Manager service configuration if you want -->
   <!-- to enable secure sockets (TLS) for any James service.                        -->
   <!-- -->
   <!-- Complex or high volume configurations may require changes to the parameters -->
   <!-- in this section.  Please read the James and Avalon documentation before -->
   <!-- attempting to adjust this section. -->
   <!-- -->

   <!-- The Connection Manager block -->
   <!-- -->
   <!-- The idle-timeout is the number of milliseconds that it will take for idle -->
   <!-- client connections managed by this connection manager to be marked at timed out. -->
   <!-- If no value is specified, the value defaults to 5 minutes, 300000 milliseconds -->
   <!-- A value of 0 means that client sockets will not timeout. -->
   <!-- -->
   <!-- The max-connections parameter specifies the default maximum number of client -->
   <!-- connections that this connection manager will allow per managed server socket. -->
   <!-- This value can be overridden by each individual service. -->
   <!-- If no value is specified, the value defaults to 30. -->
   <!-- A value of 0 creates a maximum of 1 connection due to the use of the HardResourceLimiting -->
   <!-- thread pool by the ServerConnection class. -->
   <!-- Resource limitations imposed by other components (i.e. max # of threads) may -->
   <!-- serve to limit the number of open connections. -->
   <!-- -->
   <connections>
      <idle-timeout>300000</idle-timeout>
      <max-connections>30</max-connections>
   </connections>

   <!-- The Socket Manager block -->
   <!-- -->
   <!-- The server-sockets element has a number of factory sub-elements. -->
   <!-- Each of the factory elements has a name and class attribute -->
   <!-- The name attribute for each factory element must be unique.  -->
   <!-- The class attribute is the name of a class that implements the -->
   <!-- interface org.apache.avalon.cornerstone.services.ServerSocketFactory -->
   <!-- Specific factory elements may require some sub-elements.  This is -->
   <!-- factory class dependent. -->
   <!-- -->
   <!-- The client-sockets element has a number of factory sub-elements. -->
   <!-- Each of the factory elements has a name and class attribute -->
   <!-- The name attribute for each factory element must be unique.  -->
   <!-- The class attribute is the name of a class that implements the -->
   <!-- interface org.apache.avalon.cornerstone.services.SocketFactory -->
   <!-- Specific factory elements may require some sub-elements.  This is -->
   <!-- factory class dependent. -->
   <!-- -->
   <!-- In order to use the ssl factory under Java 1.5 and support all Clients -->
   <!-- (particularly Mozilla Thunderbird) you need to install the Sun JCE -->
   <!-- provider in your environment (james/lib) -->
   <!-- e.g: jre/lib/ext/sunjce_provider.jar -->
   <!--  -->
   <sockets>
      <server-sockets>
         <factory name="plain" class="org.apache.avalon.cornerstone.blocks.sockets.DefaultServerSocketFactory"/>
      </server-sockets>
      <client-sockets>
         <factory name="plain" class="org.apache.avalon.cornerstone.blocks.sockets.DefaultSocketFactory"/>
      </client-sockets>
   </sockets>

   <!-- The Thread Manager block -->
   <!-- -->
   <!-- The thread manager provides thread pools for use throughout the server. -->
   <!-- -->
   <!-- A thread pool with the name "default" must be defined in this thread manager -->
   <!-- configuration. -->
   <!-- -->
   <!-- Each thread pool is defined with a "thread-group" element. -->
   <!-- Each of these elements has the following required sub-elements: -->
   <!--   name - the name of the thread pool, used by other components to -->
   <!--          lookup the thread pool -->
   <!--   priority - the thread priority for threads in the pool.  This is -->
   <!--              a value between 0 and 10, with 5 being the normal -->
   <!--              priority and 10 being the maximum. -->
   <!--   is-daemon - whether the threads in the pool are daemon threads. -->
   <!--   max-threads - the maximum number of threads allowed in the pool. -->
   <!--   min-threads - the minimum number of threads allowed in the pool. (not implemented) -->
   <!--   min-spare-threads - (not implemented) -->
   <thread-manager>
      <thread-group>
         <name>default</name>
         <priority>5</priority>
         <is-daemon>false</is-daemon>
         <max-threads>150</max-threads>
         <min-threads>20</min-threads>
         <min-spare-threads>20</min-spare-threads>
      </thread-group>
   </thread-manager>
</config>
